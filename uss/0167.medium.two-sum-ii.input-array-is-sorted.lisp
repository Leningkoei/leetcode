(defun two-sum-numbers (numbers target)
  (labels ((iterator (first rest-numbers)
             (cond ((null rest-numbers) '())
                   ((> first target) '())
                   ('t (let ((current (car rest-numbers))
                             (rest (cdr rest-numbers)))
                         (let ((sum (+ current first)))
                           (if (= sum target)
                               ;; (list first current)
                               `(,first ,current)
                               (or (iterator current rest)
                                   (if (< sum target)
                                       (iterator first rest)
                                       '())))))))))
    (iterator (car numbers) (cdr numbers))))

(defun test ()
  (let ((numbers '(2 3 4))
        (target 6))
    (two-sum-numbers numbers target)))
