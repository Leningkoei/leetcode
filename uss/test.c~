#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>

typedef int *Array;
typedef struct Cons {
  int current;
  struct Cons *rest;
} *Cons;
Cons cons(int current, Cons rest) {
  Cons this = (Cons)malloc(sizeof(Cons));
  this->current = current;
  this->rest = rest;
  return this;
}
int car(Cons this) {
  return this->current;
}
Cons cdr(Cons this) {
  return this->rest;
}
Cons SETCAR(Cons this, int current) {
  this->current = current;
  return this;
}
Cons SETCDR(Cons this, Cons rest) {
  this->rest = rest;
  return this;
}
Cons converArrayToList(Array array, int length) {
  Cons iterator(int index) {
    return index == length?
      NULL:
      cons(array[index], iterator(1+ index));
  }
  return iterator(0);
}
int listLength(Cons list) {
  return list?
    1+ listLength(cdr(list)):
    0;
}
Array converListToArray(Cons this) {
  int length = listLength(this);
  Array result = (int *)malloc(sizeof(int) * length);
  int iterator(int index, Cons restList) {
    if (restList) {
      result[index] = car(restList);
      return iterator(1+ index, cdr(restList));
    } else {
      return 0;
    }
  }
  iterator(0, this);
  return result;
}
int printList(Cons this) {
  int iterator(Cons restList) {
    if (restList) {
      printf("%d ", car(restList));
      return iterator(cdr(restList));
    } else {
      printf("\n");
      return 0;
    };
  };
  return iterator(this);
};


int printArray(Array array, int length) {
  int iterator(int index) {
    if (index == length) {
      printf("\n");
      return 0;
    } else {
      printf("%d ", array[index]);
      return iterator(1+ index);
    };
  };
  return iterator(0);
};
void merge(int *nums1, int nums1Size, int m, int *nums2, int nums2Size, int n){
  Cons list1 = converArrayToList(nums1, m);
  Cons list2 = converArrayToList(nums2, n);
  printList(list1);
  printList(list2);
  Cons merge(Cons nums1, int m, Cons nums2, int n) {
    if (m == 0 && n == 0) {
      return NULL;
    } else if (m == 0) {
      return nums2;
    } else if (n == 0) {
      return nums1;
    } else {
      int num1 = car(nums1);
      int num2 = car(nums2);
      return num1 <= num2?
        cons(num1, merge(cdr(nums1), m -1, nums2, n)):
        cons(num2, merge(nums1, m, cdr(nums2), n -1));
    }
  }
  Cons list = merge(list1, m, list2, n);
  printList(list);
int copyArray(Array array1, Array array2, int length) {
  int iterator(int index) {
    if (index == length) {
      return 0;
    } else {
      array1[index] = array2[index];
      return iterator(index +1);
    };
  };
  return iterator(0);
};
 printArray(converListToArray(list), m + n);
 copyArray(nums1, converListToArray(list), m + n);
 printArray(nums1, 6);
}



int main() {
  Array a = (int*)malloc(sizeof(int) * 3);
  a[0] = 1;
  a[1] = 2;
  a[2] = 3;
  Array b = (int*)malloc(sizeof(int) * 3);
  b[0] = 2;
  b[1] = 5;
  b[2] = 6;

  merge(a, 3, 3, b, 3, 3);

  printArray(a, 6);

  return 0;
};
